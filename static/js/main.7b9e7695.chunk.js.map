{"version":3,"sources":["img/persik.png","map/createMap.js","panels/Home.js","panels/Persik.js","App.js","index.js"],"names":["module","exports","mapboxgl","accessToken","Home","id","go","mapContainerRef","useRef","useEffect","mapContainer","Map","container","style","addControl","GeolocateControl","positionOptions","enableHighAccuracy","trackUserLocation","ref","el","className","title","size","level","onClick","data-to","osName","platform","Persik","props","left","IOS","src","persik","alt","App","useState","activePanel","setActivePanel","fetchedUser","geoData","e","currentTarget","dataset","to","console","log","bridge","send","ReactDOM","render","document","getElementById"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,oC,glBCE3CC,IAASC,YAAc,4FAEvB,ICiCeC,EA1BF,SAAC,GAAgB,IAAdC,EAAa,EAAbA,GAAIC,EAAS,EAATA,GACfC,EAAkBC,iBAAO,MAI7B,OAFAC,qBAAU,WDVO,IAAAC,ICUWH,EDTf,IAAIL,IAASS,IAAI,CAC3BC,UAAWF,EACXG,MAAO,uCAGLC,WACF,IAAIZ,IAASa,iBAAiB,CAC5BC,gBAAiB,CACfC,oBAAoB,GAEtBC,mBAAmB,OCDwB,IAGhD,kBAAC,IAAD,CAAOb,GAAIA,GACV,kBAAC,IAAD,gBAEC,yBAAKc,IAAK,SAAAC,GAAE,OAAIb,EAAkBa,GAAIC,UAAU,QAEjD,kBAAC,IAAD,CAAOC,MAAM,sBACZ,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAQC,KAAK,KAAKC,MAAM,IAAIC,QAASnB,EAAIoB,UAAQ,UAAjD,2B,gFCZEC,G,OAASC,eAoBAC,EAlBA,SAAAC,GAAK,OACnB,kBAAC,IAAD,CAAOzB,GAAIyB,EAAMzB,IAChB,kBAAC,IAAD,CACC0B,KAAM,kBAAC,IAAD,CAAmBN,QAASK,EAAMxB,GAAIoB,UAAQ,QAClDC,IAAWK,IAAM,kBAAC,IAAD,MAAuB,kBAAC,IAAD,QAF3C,UAOA,yBAAKX,UAAU,SAASY,IAAKC,IAAQC,IAAI,qBCwB5BC,EAtCH,WAAO,IAAD,EACqBC,mBAAS,QAD9B,mBACVC,EADU,KACGC,EADH,OAEcF,mBAAS,MAFvB,mBAEVG,EAFU,aAGaH,mBAAS,OAHtB,mBAGVI,EAHU,aAIWJ,mBAAS,kBAAC,IAAD,CAAed,KAAK,YAJxC,mBAwBXjB,GAxBW,UAwBN,SAAAoC,GACVH,EAAeG,EAAEC,cAAcC,QAAQC,MAKxC,OAFAC,QAAQC,IAAIN,GAGX,kBAAC,IAAD,CAAMH,YAAaA,GAClB,kBAAC,EAAD,CAAMjC,GAAG,OAAOmC,YAAaA,EAAalC,GAAIA,IAC9C,kBAAC,EAAD,CAAQD,GAAG,SAASC,GAAIA,MCnC3B0C,IAAOC,KAAK,gBAEZC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.7b9e7695.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/persik.4e1ec840.png\";","import mapboxgl from 'mapbox-gl'\r\n\r\nmapboxgl.accessToken = 'pk.eyJ1IjoiN2V2ZW51cCIsImEiOiJja2c5OW50NmMwbGh2MnJsczBwb3BuMXVoIn0.s6TgfUXLti8tEHE_QRbljg'\r\n\r\nconst createMap = mapContainer => {\r\n  const map = new mapboxgl.Map({\r\n    container: mapContainer,\r\n    style: 'mapbox://styles/mapbox/streets-v11'\r\n  })\r\n\r\n  map.addControl(\r\n    new mapboxgl.GeolocateControl({\r\n      positionOptions: {\r\n        enableHighAccuracy: true\r\n      },\r\n      trackUserLocation: true\r\n    })\r\n  )\r\n}\r\n\r\nexport { createMap }","import React, { useEffect, useRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel'\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader'\nimport Button from '@vkontakte/vkui/dist/components/Button/Button'\nimport Group from '@vkontakte/vkui/dist/components/Group/Group'\nimport Cell from '@vkontakte/vkui/dist/components/Cell/Cell'\nimport Div from '@vkontakte/vkui/dist/components/Div/Div'\nimport Avatar from '@vkontakte/vkui/dist/components/Avatar/Avatar'\nimport { createMap } from '../map/createMap'\n\nconst Home = ({ id, go }) => {\n\tlet mapContainerRef = useRef(null)\n\n\tuseEffect(() => { createMap(mapContainerRef) }, [])\n\n\treturn (\n\t<Panel id={id}>\n\t\t<PanelHeader>Example</PanelHeader>\n\t\t\n\t\t\t<div ref={el => mapContainerRef = el} className=\"map\"></div>\n\n\t\t<Group title=\"Navigation Example\">\n\t\t\t<Div>\n\t\t\t\t<Button size=\"xl\" level=\"2\" onClick={go} data-to=\"persik\">\n\t\t\t\t\tClick to see blabla\n\t\t\t\t</Button>\n\t\t\t</Div>\n\t\t</Group>\n\t</Panel>\n)}\n\nHome.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired\n}\n\nexport default Home\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { platform, IOS } from '@vkontakte/vkui'\nimport Panel from '@vkontakte/vkui/dist/components/Panel/Panel'\nimport PanelHeader from '@vkontakte/vkui/dist/components/PanelHeader/PanelHeader'\nimport PanelHeaderButton from '@vkontakte/vkui/dist/components/PanelHeaderButton/PanelHeaderButton'\nimport Icon28ChevronBack from '@vkontakte/icons/dist/28/chevron_back'\nimport Icon24Back from '@vkontakte/icons/dist/24/back'\n\nimport persik from '../img/persik.png'\nimport './Persik.css'\n\nconst osName = platform()\n\nconst Persik = props => (\n\t<Panel id={props.id}>\n\t\t<PanelHeader\n\t\t\tleft={<PanelHeaderButton onClick={props.go} data-to=\"home\">\n\t\t\t\t{osName === IOS ? <Icon28ChevronBack/> : <Icon24Back/>}\n\t\t\t</PanelHeaderButton>}\n\t\t>\n\t\t\tblabla\n\t\t</PanelHeader>\n\t\t<img className=\"Persik\" src={persik} alt=\"Persik The Cat\"/>\n\t</Panel>\n);\n\nPersik.propTypes = {\n\tid: PropTypes.string.isRequired,\n\tgo: PropTypes.func.isRequired,\n};\n\nexport default Persik\n","import React, { useState, useEffect } from 'react'\nimport bridge from '@vkontakte/vk-bridge'\nimport View from '@vkontakte/vkui/dist/components/View/View'\nimport ScreenSpinner from '@vkontakte/vkui/dist/components/ScreenSpinner/ScreenSpinner'\nimport '@vkontakte/vkui/dist/vkui.css'\n\nimport Home from './panels/Home'\nimport Persik from './panels/Persik'\n\nconst App = () => {\n\tconst [activePanel, setActivePanel] = useState('home')\n\tconst [fetchedUser, setUser] = useState(null)\n\tconst [geoData, setGeoData] = useState(null)\n\tconst [popout, setPopout] = useState(<ScreenSpinner size='large' />)\n\n\t// useEffect(() => {\n\t// \tbridge.subscribe(({ detail: { type, data }}) => {\n\t// \t\tif (type === 'VKWebAppUpdateConfig') {\n\t// \t\t\tconst schemeAttribute = document.createAttribute('scheme')\n\t// \t\t\tschemeAttribute.value = data.scheme ? data.scheme : 'client_light'\n\t// \t\t\tdocument.body.attributes.setNamedItem(schemeAttribute)\n\t// \t\t}\n\t// \t});\n\t// \tasync function fetchData() {\n\t// \t\tconst user = await bridge.send('VKWebAppGetUserInfo')\n\t// \t\tconst geo = await bridge.send('VKWebAppGetGeodata')\n\t// \t\tsetUser(user)\n\t// \t\tsetGeoData(geo)\n\t// \t\tsetPopout(null)\n\t// \t}\n\t// \tfetchData()\n\t// }, [])\n\n\tconst go = e => {\n\t\tsetActivePanel(e.currentTarget.dataset.to)\n\t};\n\n\tconsole.log(geoData)\n\t\n\treturn (\n\t\t<View activePanel={activePanel}>\n\t\t\t<Home id='home' fetchedUser={fetchedUser} go={go} />\n\t\t\t<Persik id='persik' go={go} />\n\t\t</View>\n\t)\n}\n\nexport default App\n\n","import \"core-js/features/map\"\nimport \"core-js/features/set\"\nimport React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport bridge from \"@vkontakte/vk-bridge\"\nimport App from \"./App\"\n\nbridge.send(\"VKWebAppInit\");\n\nReactDOM.render(<App />, document.getElementById(\"root\"))\nif (process.env.NODE_ENV === \"development\") {\n  import(\"./eruda\").then(({ default: eruda }) => {})\n}\n"],"sourceRoot":""}